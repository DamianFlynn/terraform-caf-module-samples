{
  "structureVersion": "3.9.1",
  "containerVersion": "3.0.9",
  "force": false,
  "namingStandard": {
    "rbacGroups": "{prefix} {type} {scope} [{resource} [{right}]] {delegation}",
    "subscriptions": "[{environment}-]{service}",
    "resourceGroups": "{environment}-{service}-[{role}]"
  },
  "tenants": [
    {
      "name": "[#_central.tenant.name_#]",
      "id": "[#_central.tenant.id_#]",
      "deployClientId": "[#_central.tenant.deployclient.id_#]",
      "location": "[#_datacenter.001.location_#]"
    }
  ],
  "datacenters": [
    {
      "name": "[#_datacenter.001.name_#]",
      "location": "[#_datacenter.001.location_#]"
    }
  ],
  "managementGroups": [
    {
      "name": "[#_central.managementgroup.root.name_#]",
      "displayName": "[#_central.managementgroup.root.displayname_#]",
      "deployments": [
        "mg.arm.policydefinition.vdcroot.gov",
        "mg.arm.policydefinition.vdcroot"
      ]
    }
  ],
  "deployments": [
    {
      "name": "mg.arm.policydefinition.vdcroot.gov",
      "templatePath": "https://piacinnofactor.blob.core.windows.net/modules/mg.arm.policydefinition/2021-02-25/mg.arm.policydefinition.json",
      "canRedeploy": true,
      "force": true,
      "parameters": {
        "mgmtGroupId": {
          "value": "[#_central.managementgroup.root.name_#]"
        },
        "policies": {
          "value": [
            {
              "name": "tagResourcegroupWithCreationTimestamp",
              "displayName": "[GOV]: Append a tag to a resource with its creation timestamp (utc)",
              "description": "Appends the creation date and time (utc) when the resource group was created. Does not modify the tags of resource groups created before this policy was applied until those resource groups are changed.",
              "mode": "All",
              "parameters": {
                "tagName": {
                  "type": "String",
                  "metadata": {
                    "displayName": "Tag Name",
                    "description": "Name of the tag, such as 'CreatedBy'."
                  }
                }
              },
              "policyRule": {
                "if": {
                  "allOf": [
                    {
                      "field": "type",
                      "equals": "Microsoft.Resources/subscriptions/resourceGroups"
                    },
                    {
                      "field": "[concat('tags[', parameters('tagName'), ']')]",
                      "exists": "false"
                    }
                  ]
                },
                "then": {
                  "effect": "Append",
                  "details": [
                    {
                      "field": "[concat('tags[', parameters('tagName'), ']')]",
                      "value": "[utcNow()]"
                    }
                  ]
                }
              }
            },
            {
              "name": "customRolesAudit",
              "displayName": "[GOV]: Audit usage of custom RBAC roles",
              "mode": "All",
              "description": "Audit usage of custom roles. They should be treated as an exception and only be used after a rigorous review.",
              "parameters": {
                "effect": {
                  "type": "String",
                  "metadata": {
                    "displayName": "Effect",
                    "description": "Enable or disable the execution of the policy."
                  },
                  "allowedValues": [
                    "Audit",
                    "Disabled"
                  ],
                  "defaultValue": "Audit"
                }
              },
              "policyRule": {
                "if": {
                  "allOf": [
                    {
                      "field": "type",
                      "equals": "Microsoft.Authorization/roleDefinitions"
                    },
                    {
                      "field": "Microsoft.Authorization/roleDefinitions/type",
                      "equals": "CustomRole"
                    },
                    {
                      "field": "Microsoft.Authorization/roleDefinitions/roleName",
                      "notIn": [
                        "Subscription Operator",
                        "Security Operator",
                        "Network Operator",
                        "Application Operator"
                      ]
                    }
                  ]
                },
                "then": {
                  "effect": "[parameters('effect')]"
                }
              }
            },
            {
              "name": "subscriptionDiagnosticSettings",
              "displayName": "[GOV]: Azure subscriptions should have a Diagnostic setting for Activity Log",
              "mode": "All",
              "description": "This policy ensures if a Diagnostic setting is enabled for exporting activity logs. It audits if there is no Diagnostic setting created to export the logs to a storage account.",
              "parameters": {
                "effect": {
                  "type": "String",
                  "metadata": {
                    "displayName": "Effect",
                    "description": "Enable or disable the execution of the policy."
                  },
                  "allowedValues": [
                    "AuditIfNotExists",
                    "Disabled"
                  ],
                  "defaultValue": "AuditIfNotExists"
                }
              },
              "policyRule": {
                "if": {
                  "field": "type",
                  "equals": "Microsoft.Resources/subscriptions"
                },
                "then": {
                  "effect": "[parameters('effect')]",
                  "details": {
                    "type": "microsoft.insights/diagnosticSettings",
                    "existenceCondition": {
                      "field": "Microsoft.Insights/diagnosticSettings/storageAccountId",
                      "exists": "true"
                    }
                  }
                }
              }
            },
            {
              "name": "customRolesForSubscriptionOwner",
              "displayName": "[GOV]: Custom subscription owner roles should not exist",
              "mode": "All",
              "description": "This policy ensures that no custom subscription owner roles exist.",
              "parameters": {
                "effect": {
                  "type": "String",
                  "metadata": {
                    "displayName": "Effect",
                    "description": "Enable or disable the execution of the policy."
                  },
                  "allowedValues": [
                    "Audit",
                    "Deny",
                    "Disabled"
                  ],
                  "defaultValue": "Audit"
                }
              },
              "policyRule": {
                "if": {
                  "allOf": [
                    {
                      "field": "type",
                      "equals": "Microsoft.Authorization/roleDefinitions"
                    },
                    {
                      "field": "Microsoft.Authorization/roleDefinitions/type",
                      "equals": "CustomRole"
                    },
                    {
                      "anyOf": [
                        {
                          "not": {
                            "field": "Microsoft.Authorization/roleDefinitions/permissions[*].actions[*]",
                            "notEquals": "*"
                          }
                        },
                        {
                          "not": {
                            "field": "Microsoft.Authorization/roleDefinitions/permissions.actions[*]",
                            "notEquals": "*"
                          }
                        }
                      ]
                    },
                    {
                      "not": {
                        "field": "Microsoft.Authorization/roleDefinitions/assignableScopes[*]",
                        "notIn": [
                          "[concat(subscription().id,'/')]",
                          "[subscription().id]",
                          "/"
                        ]
                      }
                    },
                    {
                      "not": {
                        "field": "Microsoft.Authorization/roleDefinitions/assignableScopes[*]",
                        "notLike": "/providers/Microsoft.Management/*"
                      }
                    }
                  ]
                },
                "then": {
                  "effect": "[parameters('effect')]"
                }
              }
            }
          ]
        }
      }
    },
    {
      "name": "mg.arm.policydefinition.vdcroot",
      "templatePath": "https://piacinnofactor.blob.core.windows.net/modules/mg.arm.policydefinition/2021-02-25/mg.arm.policydefinition.json",
      "canRedeploy": true,
      "force": true,
      "parameters": {
        "mgmtGroupId": {
          "value": "[#_central.managementgroup.root.name_#]"
        },
        "policies": {
          "value": [
            {
              "name": "automationEncryptedVariables",
              "displayName": "[GOV]: Automation account variables should be encrypted",
              "mode": "All",
              "description": "This policy will audit that automation account variables are encrypted to ensure sensitive data are protected.",
              "parameters": {
                "effect": {
                  "type": "String",
                  "metadata": {
                    "displayName": "Effect",
                    "description": "Enable or disable the execution of the policy."
                  },
                  "allowedValues": [
                    "Audit",
                    "Deny",
                    "Disabled"
                  ],
                  "defaultValue": "Audit"
                }
              },
              "policyRule": {
                "if": {
                  "allOf": [
                    {
                      "field": "type",
                      "equals": "Microsoft.Automation/automationAccounts/variables"
                    },
                    {
                      "field": "Microsoft.Automation/automationAccounts/variables/isEncrypted",
                      "notEquals": "true"
                    }
                  ]
                },
                "then": {
                  "effect": "[parameters('effect')]"
                }
              }
            },
            {
              "name": "regionAuditNetworkWatcher",
              "displayName": "[GOV]: Network Watcher should be enabled",
              "mode": "All",
              "description": "Network watcher is a regional service that monitor traffic in and out of Azure virtual networks and provides useful troubleshooting tools to aid in diagnosing network problems.",
              "parameters": {
                "effect": {
                  "type": "String",
                  "metadata": {
                    "displayName": "Effect",
                    "description": "Enable or disable the execution of the policy"
                  },
                  "allowedValues": [
                    "AuditIfNotExists",
                    "Disabled"
                  ],
                  "defaultValue": "AuditIfNotExists"
                },
                "listOfLocations": {
                  "type": "Array",
                  "metadata": {
                    "displayName": "Locations",
                    "description": "List of regions where network watcher should be enabled.",
                    "strongType": "location"
                  }
                }
              },
              "policyRule": {
                "if": {
                  "field": "type",
                  "equals": "Microsoft.Resources/subscriptions"
                },
                "then": {
                  "effect": "[parameters('effect')]",
                  "details": {
                    "type": "Microsoft.Network/networkWatchers",
                    "existenceCondition": {
                      "field": "location",
                      "in": "[parameters('listOfLocations')]"
                    }
                  }
                }
              }
            },
            {
              "name": "regionResourceLocation",
              "displayName": "[GOV]: Allowed resource location",
              "mode": "Indexed",
              "description": "This policy enables you to restrict the locations your organization can specify when deploying resources. Use to enforce your geo-compliance requirements. Excludes resource groups, Microsoft.AzureActiveDirectory/b2cDirectories, and resources that use the 'global' region.",
              "parameters": {
                "effect": {
                  "type": "String",
                  "metadata": {
                    "displayName": "Effect",
                    "description": "Enable or disable the execution of the policy"
                  },
                  "allowedValues": [
                    "Audit",
                    "Deny",
                    "Disabled"
                  ],
                  "defaultValue": "Audit"
                },
                "listOfAllowedLocations": {
                  "type": "Array",
                  "metadata": {
                    "displayName": "Allowed locations",
                    "description": "The list of locations that can be specified when deploying resources.",
                    "strongType": "location"
                  }
                }
              },
              "policyRule": {
                "if": {
                  "allOf": [
                    {
                      "field": "location",
                      "notIn": "[parameters('listOfAllowedLocations')]"
                    },
                    {
                      "field": "location",
                      "notEquals": "global"
                    },
                    {
                      "field": "type",
                      "notEquals": "Microsoft.AzureActiveDirectory/b2cDirectories"
                    }
                  ]
                },
                "then": {
                  "effect": "[parameters('effect')]"
                }
              }
            },
            {
              "name": "regionResourceGroupLocation",
              "displayName": "[GOV]: Allowed resource group location",
              "mode": "All",
              "description": "This policy enables you to restrict the locations your organization can create resource groups in. Use to enforce your geo-compliance requirements.",
              "parameters": {
                "effect": {
                  "type": "String",
                  "metadata": {
                    "displayName": "Effect",
                    "description": "Enable or disable the execution of the policy."
                  },
                  "allowedValues": [
                    "Audit",
                    "Deny",
                    "Disabled"
                  ],
                  "defaultValue": "Audit"
                },
                "listOfAllowedLocations": {
                  "type": "Array",
                  "metadata": {
                    "displayName": "Allowed locations",
                    "description": "The list of locations that resource groups can be created in.",
                    "strongType": "location"
                  }
                }
              },
              "policyRule": {
                "if": {
                  "allOf": [
                    {
                      "field": "type",
                      "equals": "Microsoft.Resources/subscriptions/resourceGroups"
                    },
                    {
                      "field": "location",
                      "notIn": "[parameters('listOfAllowedLocations')]"
                    }
                  ]
                },
                "then": {
                  "effect": "[parameters('effect')]"
                }
              }
            },
            {
              "name": "networkIPForwardOnNIC",
              "displayName": "[GOV]: Network interfaces should disable IP forwarding",
              "mode": "Indexed",
              "description": "This policy denies the network interfaces which enable IP forwarding. The setting of IP forwarding disables Azure's check of the source and destination for a network interface. This should be reviewed by the network security team.",
              "parameters": {
                "effect": {
                  "type": "String",
                  "metadata": {
                    "displayName": "Effect",
                    "description": "Enable or disable the execution of the policy."
                  },
                  "allowedValues": [
                    "Audit",
                    "Deny",
                    "Disabled"
                  ],
                  "defaultValue": "Audit"
                }
              },
              "policyRule": {
                "if": {
                  "allOf": [
                    {
                      "field": "type",
                      "equals": "Microsoft.Network/networkInterfaces"
                    },
                    {
                      "field": "Microsoft.Network/networkInterfaces/enableIpForwarding",
                      "equals": "true"
                    }
                  ]
                },
                "then": {
                  "effect": "[parameters('effect')]"
                }
              }
            },
            {
              "name": "networkNSGonNIC",
              "displayName": "[GOV]: Network interfaces should not have NSG's Attached",
              "mode": "Indexed",
              "description": "This policy checks to ensure an NSG is not allocated to every virtual network interface.",
              "parameters": {
                "effect": {
                  "type": "String",
                  "metadata": {
                    "displayName": "Effect",
                    "description": "Enable or disable the execution of the policy."
                  },
                  "allowedValues": [
                    "Audit",
                    "Deny",
                    "Disabled"
                  ],
                  "defaultValue": "Audit"
                }
              },
              "policyRule": {
                "if": {
                  "allOf": [
                    {
                      "field": "type",
                      "equals": "Microsoft.Network/networkInterfaces"
                    },
                    {
                      "not": {
                        "field": "Microsoft.Network/networkInterfaces/networkSecurityGroup.id",
                        "notLike": "*"
                      }
                    }
                  ]
                },
                "then": {
                  "effect": "[parameters('effect')]"
                }
              }
            },
            {
              "name": "networkPIPonNIC",
              "displayName": "[GOV]: Network interfaces should not have public IP's",
              "mode": "Indexed",
              "description": "This policy denies the network interfaces which are configured with any public IP. Public IP addresses allow internet resources to communicate inbound to Azure resources, and Azure resources to communicate outbound to the internet. This should be reviewed by the network security team.",
              "parameters": {
                "effect": {
                  "type": "String",
                  "metadata": {
                    "displayName": "Effect",
                    "description": "Enable or disable the execution of the policy."
                  },
                  "allowedValues": [
                    "Audit",
                    "Deny",
                    "Disabled"
                  ],
                  "defaultValue": "Audit"
                }
              },
              "policyRule": {
                "if": {
                  "allOf": [
                    {
                      "field": "type",
                      "equals": "Microsoft.Network/networkInterfaces"
                    },
                    {
                      "not": {
                        "field": "Microsoft.Network/networkInterfaces/ipconfigurations[*].publicIpAddress.id",
                        "notLike": "*"
                      }
                    }
                  ]
                },
                "then": {
                  "effect": "[parameters('effect')]"
                }
              }
            },
            {
              "name": "storageSecureTransfers",
              "displayName": "[GOV]: Secure transfer to storage accounts should be enabled",
              "mode": "Indexed",
              "description": "Audit or deny storage account that don't have secure transfer enabled. This is an option that force a storage account to accept requests only from secure connections (HTTPS). Use of HTTPS ensures authentication between the server and the service and protects data in transit from network layer attacks such as man-in-the-middle, eavesdropping, and session-hijacking.",
              "parameters": {
                "effect": {
                  "type": "String",
                  "metadata": {
                    "displayName": "Effect",
                    "description": "Enable or disable the execution of the policy."
                  },
                  "allowedValues": [
                    "Audit",
                    "Deny",
                    "Disabled"
                  ],
                  "defaultValue": "Audit"
                }
              },
              "policyRule": {
                "if": {
                  "allOf": [
                    {
                      "field": "type",
                      "equals": "Microsoft.Storage/storageAccounts"
                    },
                    {
                      "not": {
                        "field": "Microsoft.Storage/storageAccounts/supportsHttpsTrafficOnly",
                        "equals": "True"
                      }
                    }
                  ]
                },
                "then": {
                  "effect": "[parameters('effect')]"
                }
              }
            },
            {
              "name": "storageEncryptedFile",
              "displayName": "[GOV]: Require encryption on File Storage accounts",
              "mode": "Indexed",
              "description": "The large amount of data stored in Azure file shares may be subject to encryption requirements. This policy can be used to audit for or enforce compliance.",
              "parameters": {
                "effect": {
                  "type": "String",
                  "metadata": {
                    "displayName": "Effect",
                    "description": "Enable or disable the execution of the policy."
                  },
                  "allowedValues": [
                    "Audit",
                    "Deny",
                    "Disabled"
                  ],
                  "defaultValue": "Audit"
                }
              },
              "policyRule": {
                "if": {
                  "allOf": [
                    {
                      "field": "type",
                      "equals": "Microsoft.Storage/storageAccounts"
                    },
                    {
                      "field": "Microsoft.Storage/storageAccounts/enableFileEncryption",
                      "equals": "false"
                    }
                  ]
                },
                "then": {
                  "effect": "[parameters('effect')]"
                }
              }
            },
            {
              "name": "storageEncryptedDatalake",
              "displayName": "[GOV]: Require encryption on Data Lake Store accounts",
              "mode": "Indexed",
              "description": "This policy ensures encryption is enabled on all Data Lake Store accounts.",
              "parameters": {
                "effect": {
                  "type": "String",
                  "metadata": {
                    "displayName": "Effect",
                    "description": "Enable or disable the execution of the policy."
                  },
                  "allowedValues": [
                    "Audit",
                    "Deny",
                    "Disabled"
                  ],
                  "defaultValue": "Audit"
                }
              },
              "policyRule": {
                "if": {
                  "allOf": [
                    {
                      "field": "type",
                      "equals": "Microsoft.DataLakeStore/accounts"
                    },
                    {
                      "field": "Microsoft.DataLakeStore/accounts/encryptionState",
                      "equals": "Disabled"
                    }
                  ]
                },
                "then": {
                  "effect": "[parameters('effect')]"
                }
              }
            },
            {
              "name": "spokeBlacklistedResources",
              "displayName": "[GOV]: Not allowed (Blacklisted) resource types",
              "mode": "All",
              "description": "This policy can audit or deny specified resource types from being deployed to the scopes where the policy is assigned.",
              "parameters": {
                "effect": {
                  "type": "String",
                  "metadata": {
                    "displayName": "Effect",
                    "description": "Enable or disable the execution of the policy"
                  },
                  "allowedValues": [
                    "Audit",
                    "Deny",
                    "Disabled"
                  ],
                  "defaultValue": "Audit"
                },
                "listOfResourceTypesNotAllowed": {
                  "type": "Array",
                  "metadata": {
                    "displayName": "Not allowed resource types",
                    "description": "The list of resource types that cannot be deployed.",
                    "strongType": "resourceTypes"
                  }
                }
              },
              "policyRule": {
                "if": {
                  "field": "type",
                  "in": "[parameters('listOfResourceTypesNotAllowed')]"
                },
                "then": {
                  "effect": "[parameters('effect')]"
                }
              }
            },
            {
              "name": "subscriptionVMSkus",
              "displayName": "[GOV]: Allowed virtual machine SKU's",
              "mode": "Indexed",
              "description": "This policy enables you to specify a set of virtual machine SKUs that your organization can deploy.",
              "parameters": {
                "effect": {
                  "type": "String",
                  "metadata": {
                    "displayName": "Effect",
                    "description": "Enable or disable the execution of the policy."
                  },
                  "allowedValues": [
                    "Audit",
                    "Deny",
                    "Disabled"
                  ],
                  "defaultValue": "Audit"
                },
                "listOfAllowedSKUs": {
                  "type": "Array",
                  "metadata": {
                    "displayName": "Allowed SKUs",
                    "description": "The list of SKUs that can be specified for virtual machines.",
                    "strongType": "VMSKUs"
                  }
                }
              },
              "policyRule": {
                "if": {
                  "allOf": [
                    {
                      "field": "type",
                      "equals": "Microsoft.Compute/virtualMachines"
                    },
                    {
                      "not": {
                        "field": "Microsoft.Compute/virtualMachines/sku.name",
                        "in": "[parameters('listOfAllowedSKUs')]"
                      }
                    }
                  ]
                },
                "then": {
                  "effect": "[parameters('effect')]"
                }
              }
            },
            {
              "name": "subscriptionStorageSkus",
              "displayName": "[GOV]: Allowed storage account SKU's",
              "mode": "Indexed",
              "description": "This policy enables you to specify a set of storage account SKUs that your organization can deploy.",
              "parameters": {
                "effect": {
                  "type": "String",
                  "metadata": {
                    "displayName": "Effect",
                    "description": "Enable or disable the execution of the policy."
                  },
                  "allowedValues": [
                    "Audit",
                    "Deny",
                    "Disabled"
                  ],
                  "defaultValue": "Audit"
                },
                "listOfAllowedSKUs": {
                  "type": "Array",
                  "metadata": {
                    "displayName": "Allowed SKUs",
                    "description": "The list of SKUs that can be specified for storage accounts.",
                    "strongType": "StorageSKUs"
                  }
                }
              },
              "policyRule": {
                "if": {
                  "allOf": [
                    {
                      "field": "type",
                      "equals": "Microsoft.Storage/storageAccounts"
                    },
                    {
                      "not": {
                        "field": "Microsoft.Storage/storageAccounts/sku.name",
                        "in": "[parameters('listOfAllowedSKUs')]"
                      }
                    }
                  ]
                },
                "then": {
                  "effect": "[parameters('effect')]"
                }
              }
            },
            {
              "name": "vmDiagnosticLogsEnabledonVMSS",
              "displayName": "[GOV]: Diagnostic logs in Virtual Machine Scale Sets should be enabled",
              "mode": "Indexed",
              "description": "It is recommended to enable logs so that activity trail can be recreated when investigations are required in the event of an incident or a compromise.",
              "parameters": {
                "effect": {
                  "type": "String",
                  "metadata": {
                    "displayName": "Effect",
                    "description": "Enable or disable the execution of the policy."
                  },
                  "allowedValues": [
                    "AuditIfNotExists",
                    "Disabled"
                  ],
                  "defaultValue": "AuditIfNotExists"
                }
              },
              "policyRule": {
                "if": {
                  "field": "type",
                  "equals": "Microsoft.Compute/virtualMachineScaleSets"
                },
                "then": {
                  "effect": "[parameters('effect')]",
                  "details": {
                    "type": "Microsoft.Compute/virtualMachineScaleSets/extensions",
                    "existenceCondition": {
                      "anyOf": [
                        {
                          "allOf": [
                            {
                              "field": "Microsoft.Compute/virtualMachineScaleSets/extensions/type",
                              "equals": "IaaSDiagnostics"
                            },
                            {
                              "field": "Microsoft.Compute/virtualMachineScaleSets/extensions/publisher",
                              "equals": "Microsoft.Azure.Diagnostics"
                            }
                          ]
                        },
                        {
                          "allOf": [
                            {
                              "field": "Microsoft.Compute/virtualMachineScaleSets/extensions/type",
                              "equals": "LinuxDiagnostic"
                            },
                            {
                              "field": "Microsoft.Compute/virtualMachineScaleSets/extensions/publisher",
                              "equals": "Microsoft.OSTCExtensions"
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            },
            {
              "name": "vmManagedDiskAudit",
              "displayName": "[GOV]: Audit VMs that do not use managed disks",
              "mode": "All",
              "description": "This policy audits VM disks to ensure that managed disks are used.",
              "parameters": {
                "effect": {
                  "type": "String",
                  "metadata": {
                    "displayName": "Effect",
                    "description": "Enable or disable the execution of the policy."
                  },
                  "allowedValues": [
                    "Audit",
                    "Deny",
                    "Disabled"
                  ],
                  "defaultValue": "Audit"
                }
              },
              "policyRule": {
                "if": {
                  "anyOf": [
                    {
                      "allOf": [
                        {
                          "field": "type",
                          "equals": "Microsoft.Compute/virtualMachines"
                        },
                        {
                          "field": "Microsoft.Compute/virtualMachines/osDisk.uri",
                          "exists": "True"
                        }
                      ]
                    },
                    {
                      "allOf": [
                        {
                          "field": "type",
                          "equals": "Microsoft.Compute/VirtualMachineScaleSets"
                        },
                        {
                          "anyOf": [
                            {
                              "field": "Microsoft.Compute/VirtualMachineScaleSets/osDisk.vhdContainers",
                              "exists": "True"
                            },
                            {
                              "field": "Microsoft.Compute/VirtualMachineScaleSets/osdisk.imageUrl",
                              "exists": "True"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                "then": {
                  "effect": "[parameters('effect')]"
                }
              }
            },
            {
              "name": "vmJoinActiveDirectoryDomain",
              "displayName": "[GOV]: Join a Virtual Machine to an Active Directory Domain",
              "mode": "All",
              "description": "Many legacy and cloud-first workloads require virtual machines that are domain joined. This policy, if assigned and configured, can automatically join virtual machines.",
              "parameters": {
                "listOfImageIdToInclude": {
                  "type": "Array",
                  "metadata": {
                    "displayName": "Marketplace image IDs",
                    "description": "A list of marketplace images that will be subject to this policy."
                  }
                },
                "ouPath": {
                  "type": "String",
                  "metadata": {
                    "displayName": "OU Path",
                    "description": "The LDAP format path to the OU that the computer object will reside in."
                  }
                },
                "domainFQDN": {
                  "type": "String",
                  "metadata": {
                    "displayName": "Domain name",
                    "description": "The fully qualified domain name of the Active Directory Domain Services domain."
                  }
                }
              },
              "policyRule": {
                "if": {
                  "allOf": [
                    {
                      "field": "type",
                      "equals": "Microsoft.Compute/virtualMachines"
                    },
                    {
                      "anyOf": [
                        {
                          "field": "Microsoft.Compute/imageId",
                          "in": "[parameters('listOfImageIdToInclude')]"
                        },
                        {
                          "allOf": [
                            {
                              "field": "Microsoft.Compute/imagePublisher",
                              "equals": "MicrosoftWindowsServer"
                            },
                            {
                              "field": "Microsoft.Compute/imageOffer",
                              "equals": "WindowsServer"
                            },
                            {
                              "field": "Microsoft.Compute/imageSKU",
                              "in": [
                                "2008-R2-SP1",
                                "2008-R2-SP1-smalldisk",
                                "2012-Datacenter",
                                "2012-Datacenter-smalldisk",
                                "2012-R2-Datacenter",
                                "2012-R2-Datacenter-smalldisk",
                                "2016-Datacenter",
                                "2016-Datacenter-Server-Core",
                                "2016-Datacenter-Server-Core-smalldisk",
                                "2016-Datacenter-smalldisk",
                                "2016-Datacenter-with-Containers",
                                "2016-Datacenter-with-RDSH",
                                "2019-Datacenter",
                                "2019-Datacenter-Core",
                                "2019-Datacenter-Core-smalldisk",
                                "2019-Datacenter-Core-with-Containers",
                                "2019-Datacenter-Core-with-Containers-smalldisk",
                                "2019-Datacenter-smalldisk",
                                "2019-Datacenter-with-Containers-smalldisk",
                                "2019-Datacenter-zhcn"
                              ]
                            }
                          ]
                        },
                        {
                          "allOf": [
                            {
                              "field": "Microsoft.Compute/imagePublisher",
                              "equals": "MicrosoftWindowsServer"
                            },
                            {
                              "field": "Microsoft.Compute/imageOffer",
                              "equals": "WindowsServerSemiAnnual"
                            },
                            {
                              "field": "Microsoft.Compute/imageSKU",
                              "in": [
                                "Datacenter-Core-1709-smalldisk",
                                "Datacenter-Core-1709-with-Containers-smalldisk",
                                "Datacenter-Core-1803-with-Containers-smalldisk"
                              ]
                            }
                          ]
                        },
                        {
                          "allOf": [
                            {
                              "field": "Microsoft.Compute/imagePublisher",
                              "equals": "MicrosoftWindowsServerHPCPack"
                            },
                            {
                              "field": "Microsoft.Compute/imageOffer",
                              "equals": "WindowsServerHPCPack"
                            }
                          ]
                        },
                        {
                          "allOf": [
                            {
                              "field": "Microsoft.Compute/imagePublisher",
                              "equals": "MicrosoftSQLServer"
                            },
                            {
                              "anyOf": [
                                {
                                  "field": "Microsoft.Compute/imageOffer",
                                  "like": "*-WS2019"
                                },
                                {
                                  "field": "Microsoft.Compute/imageOffer",
                                  "like": "*-WS2019-BYOL"
                                },
                                {
                                  "field": "Microsoft.Compute/imageOffer",
                                  "like": "*-WS2016"
                                },
                                {
                                  "field": "Microsoft.Compute/imageOffer",
                                  "like": "*-WS2016-BYOL"
                                },
                                {
                                  "field": "Microsoft.Compute/imageOffer",
                                  "like": "*-WS2012R2"
                                },
                                {
                                  "field": "Microsoft.Compute/imageOffer",
                                  "like": "*-WS2012R2-BYOL"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "allOf": [
                            {
                              "field": "Microsoft.Compute/imagePublisher",
                              "equals": "MicrosoftRServer"
                            },
                            {
                              "field": "Microsoft.Compute/imageOffer",
                              "equals": "MLServer-WS2019"
                            },
                            {
                              "field": "Microsoft.Compute/imageOffer",
                              "equals": "MLServer-WS2016"
                            }
                          ]
                        },
                        {
                          "allOf": [
                            {
                              "field": "Microsoft.Compute/imagePublisher",
                              "equals": "MicrosoftVisualStudio"
                            },
                            {
                              "field": "Microsoft.Compute/imageOffer",
                              "in": [
                                "VisualStudio",
                                "Windows"
                              ]
                            }
                          ]
                        },
                        {
                          "allOf": [
                            {
                              "field": "Microsoft.Compute/imagePublisher",
                              "equals": "MicrosoftDynamicsAX"
                            },
                            {
                              "field": "Microsoft.Compute/imageOffer",
                              "equals": "Dynamics"
                            },
                            {
                              "field": "Microsoft.Compute/imageSKU",
                              "equals": "Pre-Req-AX7-Onebox-U8"
                            }
                          ]
                        },
                        {
                          "allOf": [
                            {
                              "field": "Microsoft.Compute/imagePublisher",
                              "equals": "microsoft-ads"
                            },
                            {
                              "field": "Microsoft.Compute/imageOffer",
                              "equals": "windows-data-science-vm"
                            }
                          ]
                        },
                        {
                          "allOf": [
                            {
                              "field": "Microsoft.Compute/imagePublisher",
                              "equals": "MicrosoftWindowsDesktop"
                            },
                            {
                              "field": "Microsoft.Compute/imageOffer",
                              "equals": "Windows-10"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                "then": {
                  "effect": "deployIfNotExists",
                  "details": {
                    "type": "Microsoft.Compute/virtualMachines/extensions",
                    "roleDefinitionIds": [
                      "/providers/microsoft.authorization/roleDefinitions/"
                    ],
                    "existenceCondition": {
                      "allOf": [
                        {
                          "field": "Microsoft.Compute/virtualMachines/extensions/type",
                          "equals": "JsonADDomainExtension"
                        },
                        {
                          "field": "Microsoft.Compute/virtualMachines/extensions/publisher",
                          "equals": "Microsoft.Compute"
                        },
                        {
                          "field": "Microsoft.Compute/virtualMachines/extensions/provisioningState",
                          "equals": "Succeeded"
                        }
                      ]
                    },
                    "deployment": {
                      "properties": {
                        "mode": "incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "parameters": {
                            "ouPath": {
                              "type": "string"
                            },
                            "domainFQDN": {
                              "type": "string"
                            },
                            "vmName": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            }
                          },
                          "variables": {
                            "domainJoinOptions": 131075
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "comments": "Join domain - JsonADDomainExtension",
                              "name": "[concat(parameters('vmName'), '/JsonADDomainExtension')]",
                              "apiVersion": "2018-06-01",
                              "location": "[parameters('location')]",
                              "properties": {
                                "publisher": "Microsoft.Compute",
                                "type": "JsonADDomainExtension",
                                "typeHandlerVersion": "1.3",
                                "autoUpgradeMinorVersion": true,
                                "settings": {
                                  "Name": "[parameters('domainFQDN')]",
                                  "User": "username",
                                  "Restart": "true",
                                  "Options": "[variables('domainJoinOptions')]",
                                  "OUPath": "[parameters('ouPath')]"
                                },
                                "protectedSettings": {
                                  "Password": "Password"
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "policy": {
                              "type": "string",
                              "value": "[concat('Enabled extension for VM', ': ', parameters('vmName'))]"
                            }
                          }
                        },
                        "parameters": {
                          "vmName": {
                            "value": "[field('name')]"
                          },
                          "location": {
                            "value": "[field('location')]"
                          },
                          "ouPath": {
                            "value": "[parameters('ouPath')]"
                          },
                          "domainFQDN": {
                            "value": "[parameters('domainFQDN')]"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      }
    }
  ]
}